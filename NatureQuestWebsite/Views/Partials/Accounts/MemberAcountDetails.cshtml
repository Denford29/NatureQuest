@using NatureQuestWebsite.Models
@inherits Umbraco.Web.Mvc.UmbracoViewPage<MembersModel>
@{
    if (Model.LoggedInMember != null)
    {
        var currentUser = Model.LoggedInMember;

        <div class="row">
            <div class="col-lg-4">
                <aside class="user-info-wrapper">
                    <div class="user-cover" style="background-image: url(/images/account/user-cover-img.jpg);">
                        <div class="user-info">
                            <div class="user-data">
                                <h4>@Model.FullName</h4>
                                <span>Joined @currentUser.CreateDate.ToLongDateString()</span>
                            </div>
                        </div>
                    </div>
                </aside>
                <nav class="list-group">
                    <a class="list-group-item with-badge" href="#">
                        <i class="icon-bag"></i>Orders
                        @*<span class="badge badge-primary badge-pill">6</span>*@
                    </a>
                    <a class="list-group-item active" href="#">
                        <i class="icon-head"></i>Profile
                    </a>
                    <a class="list-group-item" href="#">
                        <i class="icon-map"></i>Addresses
                    </a>
                    @*<a class="list-group-item with-badge" href="#">
                            <i class="icon-heart"></i>Wishlist
                            <span class="badge badge-primary badge-pill">3</span>
                        </a>*@
                </nav>
            </div>
            <div class="col-lg-8">
                <div class="padding-top-2x mt-2 hidden-lg-up"></div>
                @if (TempData.ContainsKey("updateError") || !string.IsNullOrWhiteSpace(Model.UpdateMessage))
                {
                    var errorMessage = (string)TempData["updateError"];
                    if (string.IsNullOrWhiteSpace(errorMessage))
                    {
                        errorMessage = Model.UpdateMessage;
                    }
                    <div class="row widget-light-skin">
                        <div class="col-lg-12">
                            <h3 class="text-danger">
                                Update error
                            </h3>
                            <p class="text-danger">@Html.Raw(errorMessage)</p>
                        </div>
                    </div>
                }

                @if (TempData.ContainsKey("updateSuccess") || !string.IsNullOrWhiteSpace(Model.UpdateMessage))
                {
                    var successMessage = (string)TempData["updateSuccess"];
                    if (string.IsNullOrWhiteSpace(successMessage))
                    {
                        successMessage = Model.UpdateMessage;
                    }
                    <div class="row widget-light-skin">
                        <div class="col-lg-12">
                            <h3 class="text-success">
                                Update success
                            </h3>
                            <p class="text-success">@Html.Raw(successMessage)</p>
                        </div>
                    </div>
                }
                @using (Html.BeginUmbracoForm("UpdateMemberDetails", "Accounts",
                    FormMethod.Post,
                    new { role = "form", id = "updateForm", @class = "row", novalidate = "novalidate" }))
                {
                    //add the anti forgery token and the hidden fields
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => Model.IsShopCustomer)
                    @Html.HiddenFor(m => Model.IsContactMember)
                    @Html.HiddenFor(m => Model.SubscribeText)
                    @Html.HiddenFor(m => Model.GoogleSiteKey)
                    @Html.HiddenFor(m => Model.Email)

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FullName)
                            @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", required = "", type = "text" })
                            @Html.ValidationMessageFor(model => Model.FullName, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", required = "", disabled = "disabled" })
                            @Html.ValidationMessageFor(model => Model.Email, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.HouseAddress)
                            @Html.TextBoxFor(model => model.HouseAddress, new { @class = "form-control", required = "", type = "text" })
                            @Html.ValidationMessageFor(model => Model.HouseAddress, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MobileNumber)
                            @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control", required = "" })
                            @Html.ValidationMessageFor(model => Model.MobileNumber, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Password)
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", required = "", type = "password" })
                            @Html.ValidationMessageFor(model => Model.Password, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PasswordConfirm)
                            @Html.TextBoxFor(model => model.PasswordConfirm, new { @class = "form-control", required = "", type = "password" })
                            @Html.ValidationMessageFor(model => Model.PasswordConfirm, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-12">
                        <hr class="mt-2 mb-3">
                        <div class="d-flex flex-wrap justify-content-between align-items-center">
                            <div class="custom-control custom-checkbox d-block">
                                @Html.CheckBoxFor(model => model.IsNewsletterMember, new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="IsNewsletterMember">@Model.SubscribeText</label>
                            </div>
                            <button class="btn btn-primary margin-right-none" type="submit">
                                Update Profile
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}