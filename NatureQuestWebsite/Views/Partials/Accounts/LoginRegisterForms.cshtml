@using NatureQuestWebsite.Models
@inherits Umbraco.Web.Mvc.UmbracoViewPage<MembersModel>
@{
    <div class="row">
        <div class="col-md-5">
            @using (Html.BeginUmbracoForm("ProcessLoginForm", "Accounts",
                FormMethod.Post,
                new { role = "form", id = "loginForm", @class = "login-box form-horizontal", novalidate = "novalidate" }))
            {

                //add the anti forgery token and the hidden fields
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => Model.IsShopCustomer)
                @Html.HiddenFor(m => Model.IsContactMember)
                @Html.HiddenFor(m => Model.SubscribeText)
                @Html.HiddenFor(m => Model.GoogleSiteKey)
                @Html.HiddenFor(m => Model.MemberTypeAlias)
                <div class="padding-top-3x hidden-md-up"></div>
                <h3 class="margin-bottom-1x">Login to your Account</h3>
                <p>Login below to view your account details or place an order.</p>

                if (TempData.ContainsKey("loginError") || !string.IsNullOrWhiteSpace(Model.LoginMessage))
                {
                    var errorMessage = (string)TempData["loginError"];
                    if (string.IsNullOrWhiteSpace(errorMessage))
                    {
                        errorMessage = Model.LoginMessage;
                    }
                    <div class="row widget-light-skin">
                        <div class="col-lg-12">
                            <h3 class="text-danger">
                                Login error
                            </h3>
                            <p class="text-danger">@Html.Raw(errorMessage)</p>
                        </div>
                    </div>
                }

                <div class="form-group input-group">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", required = "", placeholder = "Your Email Address" })
                    <span class="input-group-addon"><i class="icon-mail"></i></span>
                    @Html.ValidationMessageFor(model => Model.Email, "", new { @class = "help-block text-danger" })
                </div>

                <div class="form-group input-group">
                    @Html.TextBoxFor(model => model.Password, new { @class = "form-control", required = "", type = "password" , placeholder = "Your Password" })
                    <span class="input-group-addon"><i class="icon-lock"></i></span>
                    @Html.ValidationMessageFor(model => Model.Password, "", new { @class = "help-block text-danger" })
                </div>

                if (!Model.IsNewsletterMember)
                {
                    <div class="row">
                        <div class="form-group col-sm-12">
                            <div class="custom-control custom-checkbox">
                                @Html.CheckBoxFor(model => model.IsNewsletterMember, new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="IsNewsletterMember">@Model.SubscribeText</label>
                            </div>
                        </div>
                    </div>
                }

                <div class="text-center text-sm-right">
                    <button class="btn btn-primary margin-bottom-none" type="submit">
                        Login
                    </button>
                </div>
            }
        </div>

        <div class="col-md-7">
            <div class="padding-top-3x hidden-md-up"></div>
            <h3 class="margin-bottom-1x">No Account? Register Below.</h3>
            @if (TempData.ContainsKey("registrationSuccess") || !string.IsNullOrWhiteSpace(Model.RegistrationMessage))
            {
                var successMessage = (string)TempData["registrationSuccess"];
                if (string.IsNullOrWhiteSpace(successMessage))
                {
                    successMessage = Model.RegistrationMessage;
                }
                <div class="row widget-light-skin">
                    <div class="col-lg-12">
                        <h3 class="text-success">
                            Registration success
                        </h3>
                        <p class="text-success">@Html.Raw(successMessage)</p>
                    </div>
                </div>
            }
            else
            {
                //if we have had an error from the 1st attempt display it here
                if (TempData.ContainsKey("registrationError") || !string.IsNullOrWhiteSpace(Model.RegistrationMessage))
                {
                    var errorMessage = (string)TempData["registrationError"];
                    if (string.IsNullOrWhiteSpace(errorMessage))
                    {
                        errorMessage = Model.RegistrationMessage;
                    }
                    <div class="row widget-light-skin">
                        <div class="col-lg-12">
                            <h3 class="text-danger">
                                Registration error
                            </h3>
                            <p class="text-danger">@Html.Raw(errorMessage)</p>
                        </div>
                    </div>
                }

                using (Html.BeginUmbracoForm("ProcessRegistrationForm", "Accounts",
                FormMethod.Post,
                new { role = "form", id = "registrationForm", @class = "row", novalidate = "novalidate" }))
                {

                    //add the anti forgery token and the hidden fields
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => Model.IsShopCustomer)
                    @Html.HiddenFor(m => Model.IsNewsletterMember)
                    @Html.HiddenFor(m => Model.IsContactMember)
                    @Html.HiddenFor(m => Model.SubscribeText)
                    @Html.HiddenFor(m => Model.GoogleSiteKey)
                    @Html.HiddenFor(m => Model.MemberTypeAlias)

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FullName)
                            @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", required = "", type = "text", placeholder = "Your Full Name" })
                            @Html.ValidationMessageFor(model => Model.FullName, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email)
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", required = "", placeholder = "Your Email Address" })
                            @Html.ValidationMessageFor(model => Model.Email, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.HouseAddress)
                            @Html.TextBoxFor(model => model.HouseAddress, new { @class = "form-control", required = "", type = "text", placeholder = "Your Home Address" })
                            @Html.ValidationMessageFor(model => Model.HouseAddress, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MobileNumber)
                            @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control", required = "", placeholder = "Your Mobile Number" })
                            @Html.ValidationMessageFor(model => Model.MobileNumber, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Password)
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", required = "", type = "password" })
                            @Html.ValidationMessageFor(model => Model.Password, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PasswordConfirm)
                            @Html.TextBoxFor(model => model.PasswordConfirm, new { @class = "form-control", required = "", type = "password" })
                            @Html.ValidationMessageFor(model => Model.PasswordConfirm, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="g-recaptcha" data-sitekey="@Model.GoogleSiteKey"></div>
                    </div>

                    <div class="col-md-6 text-center text-sm-right">
                        <button class="btn btn-primary margin-bottom-none" type="submit">
                            Register
                        </button>
                    </div>
                }
            }
        </div>
    </div>
}